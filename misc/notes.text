# trilinear interpolation

We assume that coordinates within the given grid cube are within [0, 1].

Values at the vertices are given as v[i][j][k].


## value in volume (x, y, z)                (WORKS)

c     = + v[0][0][0];
cx    = - v[0][0][0] + v[1][0][0];
cy    = - v[0][0][0] + v[0][1][0];
cz    = - v[0][0][0] + v[0][0][1];
cxy   = + v[0][0][0] - v[0][1][0] - v[1][0][0] + v[1][1][0];
cxz   = + v[0][0][0] - v[0][0][1] - v[1][0][0] + v[1][0][1];
cyz   = + v[0][0][0] - v[0][0][1] - v[0][1][0] + v[0][1][1];
cxyz  = - v[0][0][0] + v[0][0][1] + v[0][1][0] - v[0][1][1]
        + v[1][0][0] - v[1][0][1] - v[1][1][0] + v[1][1][1];
        
val = c + cx x + cy y + cz z
    + cxy x y + cxz x z + cyz y z
    + cxyz x y z;


## gradient                                 (WORKS)

gradx = cx + cxy y + cxz z + cxyz y z
grady = cy + cxy x + cyz z + cxyz x z
gradz = cz + cxz x + cyz y + cxyz x y


## line through volume: a + b t

x = ax + bx t
y = ay + by t
z = az + bz t
x y = ax ay  +  (ax by + bx ay) t  +  bx by t²
x z = ax az  +  (ax bz + bx az) t  +  bx bz t²
y z = ay az  +  (ay bz + by az) t  +  by bz t²
x y z = ax ay az
      + (ax by az + ay bx az + ax ay bz)  t
      + (ax by bz + ay bx bz + bx by az)  t²
      + bx by bz  t³

## value along line through volume          (WORKS)

val = c
    + cx ax  +  cx bx  t
    + cy ay  +  cy by  t
    + cz az  +  cz bz  t
    + cxy ax ay  +  cxy (ax by + bx ay)  t  +  cxy bx by  t²
    + cxz ax az  +  cxz (ax bz + bx az)  t  +  cxz bx bz  t²
    + cyz ay az  +  cyz (ay bz + by az)  t  +  cyz by bz  t²
    + cxyz ax ay az
        + cxyz (ax by az + ay bx az + ax ay bz)  t
        + cxyz (ax by bz + ay bx bz + bx by az)  t²
        + cxyz bx by bz  t³


## polynomial coefficients of that          (WORKS)

d0 = c + cx ax + cy ay + cz az
     + cxy ax ay + cxz ax az + cyz ay az + cxyz ax ay az
d1 = cx bx + cy by + cz bz + cxy (ax by + bx ay) + cxz (ax bz + bx az)
     + cyz (ay bz + by az) + cxyz (ax by az + ay bx az + ax ay bz)
d2 = cxy bx by + cxz bx bz + cyz by bz
     + cxyz (ax by bz + ay bx bz + bx by az)
d3 = cxyz bx by bz

val = d0 + d1 t + d2 t² + d3 t³


## extrema along line

derivative:

diff = d1 + 2 d2 t + 3 d3 t²  =  0

t = (-d2 +- sqrt(d2² - 3 d1 d3)) / (3 d3)

two extrema if  d2² > 3 d1 d3
saddlepoint if  d2² = 3 d1 d3
neither if      d2² < 3 d1 d3












        // two extrema
        float tm, tp;
        if (d3 > 0) {
            tm = (-d2 - sqrt(d2 * d2 - 3 * d1 * d3)) / (3 * d3);
            tp = (-d2 + sqrt(d2 * d2 - 3 * d1 * d3)) / (3 * d3);
        } else {
            tm = (-d2 + sqrt(d2 * d2 - 3 * d1 * d3)) / (3 * d3);
            tp = (-d2 - sqrt(d2 * d2 - 3 * d1 * d3)) / (3 * d3);
        }
        // tm < tp <= 0 < 1     -> [0, 1]
        // tm <= 0 < 1 <= tp    -> [0, 1]
        // 0 < 1 <= tm < tp     -> [0, 1]
        if ((tp <= 0) || ((tm <= 0) && (1 <= tp)) || (1 <= tm)) {
            ts = vec4(0., 1., nan, nan);
        }
        // 0 < tm < 1 <= tp     -> [0, tm, 1]
        else if ((0 < tm) && (tm < 1) && (1 <= tp)) {
            ts = vec4(0., tm, 1., nan);
        }
        // tm <= 0 < tp < 1     -> [0, tp, 1]
        else if ((tm <= 0) && (0 < tp) && (tp < 1)) {
            ts = vec4(0., tp, 1., nan);
        }
        // 0 < tm < tp < 1      -> [0, tm, tp, 1]
        else if ((0 < tm) && (tp < 1)) {
            ts = vec4(0., tm, tp, 1.);
        }
        else {
            // should never happen
            error = vec4(0., 1., 0., 0.);
        }


# references

- GLSL
  https://www.khronos.org/opengl/wiki/Core_Language_%28GLSL%29
  https://www.khronos.org/registry/OpenGL-Refpages/gl4/index.php
- distance functions
  http://iquilezles.org/www/articles/distfunctions/distfunctions.htm
  http://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html
  http://iquilezles.org/www/articles/smin/smin.htm
